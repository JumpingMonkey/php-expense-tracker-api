openapi: 3.0.3
info:
  title: PHP Expense Tracker API
  description: |
    API for tracking and managing personal expenses with authentication, categories, and comprehensive filtering.
  version: 1.0.0
  
servers:
  - url: /api
    description: API base path

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Unauthorized
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: Password123
    
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: Password123
        password_confirmation:
          type: string
          format: password
          example: Password123
    
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        access_token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 3600
        user:
          $ref: '#/components/schemas/User'
    
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: user@example.com
        created_at:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
    
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Groceries
        created_at:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
    
    CategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Groceries
    
    CategoryResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Category created successfully
        data:
          $ref: '#/components/schemas/Category'
    
    CategoriesResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    
    Expense:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        category_id:
          type: integer
          example: 1
        description:
          type: string
          example: Weekly grocery shopping
        amount:
          type: number
          format: float
          example: 87.50
        expense_date:
          type: string
          format: date
          example: 2023-04-15
        notes:
          type: string
          nullable: true
          example: Bought fruits, vegetables and dairy products
        created_at:
          type: string
          format: date-time
          example: 2023-04-15T14:30:00Z
        updated_at:
          type: string
          format: date-time
          example: 2023-04-15T14:30:00Z
        category:
          $ref: '#/components/schemas/Category'
    
    ExpenseRequest:
      type: object
      required:
        - category_id
        - description
        - amount
        - expense_date
      properties:
        category_id:
          type: integer
          example: 1
        description:
          type: string
          example: Weekly grocery shopping
        amount:
          type: number
          format: float
          example: 87.50
        expense_date:
          type: string
          format: date
          example: 2023-04-15
        notes:
          type: string
          nullable: true
          example: Bought fruits, vegetables and dairy products
    
    ExpenseResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Expense created successfully
        data:
          $ref: '#/components/schemas/Expense'
    
    ExpensesResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            data:
              type: array
              items:
                $ref: '#/components/schemas/Expense'
            first_page_url:
              type: string
              example: http://localhost:8000/api/expenses?page=1
            from:
              type: integer
              example: 1
            last_page:
              type: integer
              example: 3
            last_page_url:
              type: string
              example: http://localhost:8000/api/expenses?page=3
            links:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                    nullable: true
                    example: http://localhost:8000/api/expenses?page=2
                  label:
                    type: string
                    example: "2"
                  active:
                    type: boolean
                    example: false
            next_page_url:
              type: string
              nullable: true
              example: http://localhost:8000/api/expenses?page=2
            path:
              type: string
              example: http://localhost:8000/api/expenses
            per_page:
              type: integer
              example: 15
            prev_page_url:
              type: string
              nullable: true
              example: null
            to:
              type: integer
              example: 15
            total:
              type: integer
              example: 45
    
    ExpenseSummaryResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            total_amount:
              type: number
              format: float
              example: 3240.75
            by_category:
              type: array
              items:
                type: object
                properties:
                  category_id:
                    type: integer
                    example: 1
                  total:
                    type: number
                    format: float
                    example: 543.25
                  category:
                    $ref: '#/components/schemas/Category'

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates a user and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidates the user's JWT token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Successfully logged out
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Refreshes an existing JWT token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /me:
    get:
      tags:
        - Authentication
      summary: Get authenticated user
      description: Returns the currently authenticated user's details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /categories:
    get:
      tags:
        - Categories
      summary: List all categories
      description: Returns a list of all expense categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Categories
      summary: Create a new category
      description: Creates a new expense category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get a specific category
      description: Returns details of a specific category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Categories
      summary: Update a category
      description: Updates an existing category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Categories
      summary: Delete a category
      description: Deletes an existing category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Category deleted successfully
        '400':
          description: Cannot delete category as it is being used by expenses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /expenses:
    get:
      tags:
        - Expenses
      summary: List all expenses
      description: Returns a paginated list of expenses with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: filter
          in: query
          description: Date filter (past_week, past_month, last_3_months, custom)
          required: false
          schema:
            type: string
            enum: [past_week, past_month, last_3_months, custom]
        - name: start_date
          in: query
          description: Start date for custom filter (format YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: End date for custom filter (format YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: category_id
          in: query
          description: Filter by category ID
          required: false
          schema:
            type: integer
        - name: sort_by
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [id, description, amount, expense_date, created_at, updated_at]
            default: expense_date
        - name: sort_direction
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 15
      responses:
        '200':
          description: Expenses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpensesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Expenses
      summary: Create a new expense
      description: Creates a new expense record
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseRequest'
      responses:
        '201':
          description: Expense created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /expenses/{id}:
    get:
      tags:
        - Expenses
      summary: Get a specific expense
      description: Returns details of a specific expense
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Expense ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Expense retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Expense not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Expenses
      summary: Update an expense
      description: Updates an existing expense
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Expense ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseRequest'
      responses:
        '200':
          description: Expense updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Expense not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Expenses
      summary: Delete an expense
      description: Deletes an existing expense
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Expense ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Expense deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Expense deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Expense not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /expenses/summary:
    get:
      tags:
        - Expenses
      summary: Get expense summary
      description: Returns summary statistics for expenses
      security:
        - bearerAuth: []
      parameters:
        - name: filter
          in: query
          description: Date filter (past_week, past_month, last_3_months, custom)
          required: false
          schema:
            type: string
            enum: [past_week, past_month, last_3_months, custom]
        - name: start_date
          in: query
          description: Start date for custom filter (format YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: End date for custom filter (format YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseSummaryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
